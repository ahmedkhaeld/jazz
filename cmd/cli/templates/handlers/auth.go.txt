package handlers

import (
	"crypto/sha256"
	"encoding/base64"
	"fmt"
	"github.com/CloudyKit/jet/v6"
	"github.com/ahmedkhaled/jazz/mailer"
	"github.com/ahmedkhaled/jazz/urlsigner"
	"myapp/data"
	"net/http"
	"time"
)

func (h *Handlers) Login(w http.ResponseWriter, r *http.Request) {
	err := h.Rendering(w, r, "login", nil, nil)
	if err != nil {
		h.ErrorLog.Println(err)
	}
}

func (h *Handlers) ForgotPassword(w http.ResponseWriter, r *http.Request) {
	err := h.Rendering(w, r, "forgot", nil, nil)
	if err != nil {
		h.ErrorLog.Println(err)
		h.Error500(w, r)
	}
}

func (h *Handlers) ResetPassword(w http.ResponseWriter, r *http.Request) {
	// get form values
	email := r.URL.Query().Get("email")
	theURL := r.RequestURI
	testURL := fmt.Sprintf("%s%s", h.Server.URL, theURL)

	// validate the url
	signer := urlsigner.Signer{
		Secret: []byte(h.EncryptionKey),
	}

	valid := signer.Verify(testURL)
	if !valid {
		h.ErrorLog.Print("Invalid url")
		h.ErrorUnauthorized(w, r)
		return
	}

	/// make sure it's not expired
	expired := signer.Expired(testURL, 60)
	if expired {
		h.ErrorLog.Print("Link expired")
		h.ErrorUnauthorized(w, r)
		return
	}

	// display form
	encryptedEmail, _ := h.encrypt(email)

	vars := make(jet.VarMap)
	vars.Set("email", encryptedEmail)

	err := h.Rendering(w, r, "reset-password", vars, nil)
	if err != nil {
		return
	}
}

func (h *Handlers) PostLogin(w http.ResponseWriter, r *http.Request) {

	//grab the user information from the post request
	err := r.ParseForm()
	if err != nil {
		w.Write([]byte(err.Error()))
		return
	}

	email := r.Form.Get("email")
	password := r.Form.Get("password")

	user, err := h.Models.Users.GetByEmail(email)
	if err != nil {
		w.Write([]byte(err.Error()))
		return
	}

	//check that provided password matches the stored pass
	matches, err := user.PasswordMatches(password)
	if err != nil {
		w.Write([]byte("Error validating password"))
		return
	}

	if !matches {
		w.Write([]byte("Invalid password!"))
		return
	}
	//did the user check remember me?
	if r.Form.Get("remember") == "remember" {
		randomString := h.RandomString(12)
		hasher := sha256.New()
		_, err := hasher.Write([]byte(randomString))
		if err != nil {
			h.ErrorStatus(w, http.StatusBadRequest)
			return
		}
		sha := base64.URLEncoding.EncodeToString(hasher.Sum(nil))
		rm := data.RememberToken{}
		err = rm.Insert(user.ID, sha)
		if err != nil {
			h.ErrorStatus(w, http.StatusBadRequest)
			return
		}
		//set a cookie
		expire := time.Now().Add(365 * 24 * 60 * time.Second)
		cookie := http.Cookie{
			Name:     fmt.Sprintf("_%s_remember", h.AppName),
			Value:    fmt.Sprintf("%d|%s", user.ID, sha),
			Path:     "/",
			Expires:  expire,
			HttpOnly: true,
			Domain:   h.Session.Cookie.Domain,
			MaxAge:   315350000,
			Secure:   h.Session.Cookie.Secure,
			SameSite: http.SameSiteStrictMode,
		}
		http.SetCookie(w, &cookie)
		//save hash in the session
		h.Session.Put(r.Context(), "remember_token", sha)
	}
	//put the  valid user id into the session
	h.Session.Put(r.Context(), "userID", user.ID)

	http.Redirect(w, r, "/", http.StatusSeeOther)
}

func (h *Handlers) Logout(w http.ResponseWriter, r *http.Request) {
	//delete  remember token if it exists
	if h.Session.Exists(r.Context(), "remember_token") {
		rt := data.RememberToken{}
		_ = rt.Delete(h.Session.GetString(r.Context(), "remember_token"))
	}

	//delete remember me cookie
	//set a cookie
	expire := time.Now().Add(-100 * time.Hour)
	newCookie := http.Cookie{
		Name:     fmt.Sprintf("_%s_remember", h.AppName),
		Value:    "",
		Path:     "/",
		Expires:  expire,
		HttpOnly: true,
		Domain:   h.Session.Cookie.Domain,
		MaxAge:   -1,
		Secure:   h.Session.Cookie.Secure,
		SameSite: http.SameSiteStrictMode,
	}
	http.SetCookie(w, &newCookie)

	h.Session.RenewToken(r.Context())
	h.Session.Remove(r.Context(), "userID")
	h.Session.Remove(r.Context(), "remember_token")
	h.Session.Destroy(r.Context())
	h.Session.RenewToken(r.Context())

	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) PostForgotPassword(w http.ResponseWriter, r *http.Request) {
	//parse form
	err := r.ParseForm()
	if err != nil {
		h.ErrorStatus(w, http.StatusBadRequest)
		return
	}
	//verify that supplied email exists
	var user *data.User
	email := r.Form.Get("email")
	user, err = user.GetByEmail(email)
	if err != nil {
		h.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	//create a link to password reset form
	link := fmt.Sprintf("%s/users/reset-password?email=%s", h.Server.URL, email)

	//sign the link
	sign := urlsigner.Signer{
		Secret: []byte(h.EncryptionKey),
	}
	signedLink := sign.GenerateSignedURL(link)
	h.InfoLog.Println("Signed link is: ", signedLink)

	//email the message
	var data struct {
		Link string
	}
	data.Link = signedLink
	msg := mailer.Message{
		To:       user.Email,
		Subject:  "Password reset",
		Template: "password-reset",
		Data:     data,
		From:     "admin@example.com",
	}
	h.Mail.Jobs <- msg
	res := <-h.Mail.Results
	if res.Error != nil {
		h.ErrorStatus(w, http.StatusBadRequest)
		return
	}

	//redirect the user to the login screen
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}

func (h *Handlers) PostResetPassword(w http.ResponseWriter, r *http.Request) {
	// parse the form
	err := r.ParseForm()
	if err != nil {
		h.Error500(w, r)
		return
	}

	// get and decrypt the email
	email, err := h.decrypt(r.Form.Get("email"))
	if err != nil {
		h.Error500(w, r)
		return
	}

	// get the user
	var u data.User
	user, err := u.GetByEmail(email)
	if err != nil {
		h.Error500(w, r)
		return
	}

	// reset the password
	err = user.ResetPassword(user.ID, r.Form.Get("password"))
	if err != nil {
		h.Error500(w, r)
		return
	}

	// redirect
	h.Session.Put(r.Context(), "flash", "Password reset. You can now log in.")
	http.Redirect(w, r, "/users/login", http.StatusSeeOther)
}
